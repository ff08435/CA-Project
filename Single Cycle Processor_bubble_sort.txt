module Adder(
    input [63:0] a, b,
    output reg [63:0] out
);
always@(*)
    out = a + b; // Performs addition of input signals a and b, and assigns the result to the output signal out
endmodule
 
module alu_64 (
  input [63:0] a, b,         // Input operands
  input [3:0] ALUop,        // ALU operation code
  output reg [63:0] Result, // Output result
  output Zero              // Output indicating zero result
);
  
  
  always @* begin
    // Perform ALU operation based on the ALUop
    case (ALUop)
      4'b0000: Result = a & b;            // Bitwise AND
      4'b0001: Result = a | b;            // Bitwise OR
      4'b0010: Result = a + b;            // Addition
      4'b0110: Result = a - b;            // Subtraction
      4'b1100: Result = ~(a | b);         // Bitwise NOR
      4'b0100: Result = (a < b) ? 0 : 1;  // Lesser than comparison
      default: Result = 0;                // Default case for unsupported ALUop values
    endcase
  end

  assign Zero = (Result == 0); // Check if Result is equal to zero

endmodule

module ALU_Control
(
    input [1:0] ALUOp,
    input [3:0] Funct,
    output reg [3:0] Operation
);
 always @(*)
    begin
      case(ALUOp)
    2'b00:
      begin
      Operation = 4'b0010;
      end
     2'b01:                          // branch type instructions
          begin
            case(Funct[2:0])
    	    3'b000:                  // beq
     	      begin
               Operation = 4'b0110;  // subtract
              end
            3'b100:                  // blt
     	      begin
                Operation = 4'b0100; // less than operation 
              end
         	endcase
          end

        2'b10:
            begin
            case(Funct)
            4'b0000:
                begin
                Operation = 4'b0010;
                end
            4'b1000:
                begin
                Operation = 4'b0110;
                end
            4'b0111:
                begin
                Operation = 4'b0000;
                end
            4'b0110:
                begin
                Operation = 4'b0001;
                end
            endcase
            end
    endcase
end
endmodule
       
module Control_Unit
(
    input [6:0] Opcode,
    output reg [1:0] ALUOp,
    output reg Branch, MemRead, MemtoReg, MemWrite, ALUSrc, Regwrite
);
always @(*)
begin
    case (Opcode)
    7'b0110011: // R-type (add/sub)
        begin
            ALUSrc = 1'b0;
            MemtoReg = 1'b0;
            Regwrite = 1'b1;
            MemRead = 1'b0;
            MemWrite = 1'b0;
            Branch = 1'b0;
            ALUOp = 2'b10;
        end
    7'b0000011: // I-type (ld)
        begin
            ALUSrc = 1'b1;
            MemtoReg = 1'b1;
            Regwrite = 1'b1;
            MemRead = 1'b1;
            MemWrite = 1'b0;
            Branch = 1'b0;
            ALUOp = 2'b00;
        end
    7'b0100011: // S-type(sd)
        begin
            ALUSrc = 1'b1;
            MemtoReg = 1'bx;
            Regwrite = 1'b0;
            MemRead = 1'b0;
            MemWrite = 1'b1;
            Branch = 1'b0;
            ALUOp = 2'b00;
        end
    7'b0010011: // I-type (addi)
        begin
            ALUSrc = 1'b1;
            MemtoReg = 1'b0;
            Regwrite = 1'b1;
            MemRead = 1'b1;
            MemWrite = 1'b0;
            Branch = 1'b0;
            ALUOp = 2'b00;
        end
    7'b1100011: // SB-type (beq/bne/bge)
        begin
            ALUSrc = 1'b0;
            MemtoReg = 1'bx;
            Regwrite = 1'b0;
            MemRead = 1'b0;
            MemWrite = 1'b0;
            Branch = 1'b1;
            ALUOp = 2'b01;
        end
    default: begin
            ALUSrc = 1'b0;
            MemtoReg = 1'b0;
            Regwrite = 1'b0;
            MemRead = 1'b0;
            MemWrite = 1'b0;
            Branch = 1'b0;
            ALUOp = 2'b00;
    end
    endcase
end
endmodule
  
module Data_Memory (
    input clk, MemWrite, MemRead,
    input [63:0] Mem_Address, Write_Data,
    output reg [63:0] Read_Data,
    output [63:0] element1, element2, element3, element4, element5
);
    reg [7:0] DataMemory [63:0];
  
    // Initialize DataMemory
      integer i;
    initial 
    begin
      
        for (i = 0; i < 64; i = i + 1) begin
            DataMemory[i] = 0;
        end
        DataMemory[0]  = 8'd6;
        DataMemory[8]  = 8'd2;
        DataMemory[16] = 8'd4;
        DataMemory[24] = 8'd3;
        DataMemory[32] = 8'd5;
    end
    
    // Assign element outputs
    assign element1 = {DataMemory[7], DataMemory[6], DataMemory[5], DataMemory[4], DataMemory[3], DataMemory[2], DataMemory[1], DataMemory[0]};
    assign element2 = {DataMemory[15], DataMemory[14], DataMemory[13], DataMemory[12], DataMemory[11], DataMemory[10], DataMemory[9], DataMemory[8]};
    assign element3 = {DataMemory[23], DataMemory[22], DataMemory[21], DataMemory[20], DataMemory[19], DataMemory[18], DataMemory[17], DataMemory[16]};
    assign element4 = {DataMemory[31], DataMemory[30], DataMemory[29], DataMemory[28], DataMemory[27], DataMemory[26], DataMemory[25], DataMemory[24]};
    assign element5 = {DataMemory[39], DataMemory[38], DataMemory[37], DataMemory[36], DataMemory[35], DataMemory[34], DataMemory[33], DataMemory[32]};
    
    // Write operation
    always @(posedge clk) begin
        if (MemWrite) begin
            DataMemory[Mem_Address]     = Write_Data[7:0];
            DataMemory[Mem_Address + 1] = Write_Data[15:8];
            DataMemory[Mem_Address + 2] = Write_Data[23:16];
            DataMemory[Mem_Address + 3] = Write_Data[31:24];
            DataMemory[Mem_Address + 4] = Write_Data[39:32];
            DataMemory[Mem_Address + 5] = Write_Data[47:40];
            DataMemory[Mem_Address + 6] = Write_Data[55:48];
            DataMemory[Mem_Address + 7] = Write_Data[63:56];
        end
    end
    
    // Read operation
    always @* begin
        if (MemRead) begin
            Read_Data = {DataMemory[Mem_Address + 7], DataMemory[Mem_Address + 6], DataMemory[Mem_Address + 5], DataMemory[Mem_Address + 4], DataMemory[Mem_Address + 3], DataMemory[Mem_Address + 2], DataMemory[Mem_Address + 1], DataMemory[Mem_Address]};
        end
    end
endmodule
   
module data_extractor (
    input [31:0] instruction,
    output reg [63:0] imm_data
);

  wire [6:0] opcode;  // Wire to hold the opcode extracted from the instruction
  assign opcode = instruction[6:0];  // Assign the lower 7 bits of the instruction to the opcode wire

  always @(*)  
  begin
      case (opcode)
          7'b0000011: imm_data =  {{52{instruction[31]}}, instruction[31:20]};  // I-type instruction with 12-bit immediate
          7'b0100011: imm_data = {{52{instruction[31]}}, instruction[31:25], instruction[11:7]};  // S-type instruction with 12-bit immediate
          7'b1100011: imm_data = {{52{instruction[31]}}, instruction[31], instruction[7], instruction[30:25], instruction[11:8]};  // B-type instruction with 13-bit immediate
          7'b0010011: imm_data = {{52{instruction[31]}}, instruction[31:20]};  // I-type instruction with 12-bit immediate
          default : imm_data = 64'd0;  // No immediate value for other opcode values
      endcase
  end

endmodule

module InstructionMemory(
  input [63:0] Inst_Address,
  output reg [31:0] Instruction
);
  reg [7:0] InstMemory [95:0];

   initial
    begin
      InstMemory[0]  = 8'h63;
      InstMemory[1]  = 8'h44;
      InstMemory[2]  = 8'h8B;
      InstMemory[3]  = 8'h00;
      InstMemory[4]  = 8'h63;
      InstMemory[5]  = 8'h0E;
      InstMemory[6]  = 8'h00;
      InstMemory[7]  = 8'h04;
      InstMemory[8]  = 8'h93;
      InstMemory[9]  = 8'h0B;
      InstMemory[10] = 8'h0B;
      InstMemory[11] = 8'h00;
      InstMemory[12] = 8'h93;
      InstMemory[13] = 8'h0E;
      InstMemory[14] = 8'h0E;
      InstMemory[15] = 8'h00;
      InstMemory[16] = 8'h63;
      InstMemory[17] = 8'hC4;
      InstMemory[18] = 8'h8B;
      InstMemory[19] = 8'h00;
      InstMemory[20] = 8'hE3;
      InstMemory[21] = 8'h06;
      InstMemory[22] = 8'h00;
      InstMemory[23] = 8'hFE;
      InstMemory[24] = 8'h03;
      InstMemory[25] = 8'h36;
      InstMemory[26] = 8'h0E;
      InstMemory[27] = 8'h00;
      InstMemory[28] = 8'h83;
      InstMemory[29] = 8'hB6;
      InstMemory[30] = 8'h0E;
      InstMemory[31] = 8'h00;
      InstMemory[32] = 8'h63;
      InstMemory[33] = 8'h4E;
      InstMemory[34] = 8'hD6;
      InstMemory[35] = 8'h00;
      InstMemory[36] = 8'h93;
      InstMemory[37] = 8'h8B;
      InstMemory[38] = 8'h1B;
      InstMemory[39] = 8'h00;
      InstMemory[40] = 8'h93;
      InstMemory[41] = 8'h8E;
      InstMemory[42] = 8'h8E;
      InstMemory[43] = 8'h00;
      InstMemory[44] = 8'hE3;
      InstMemory[45] = 8'hC6;
      InstMemory[46] = 8'h8B;
      InstMemory[47] = 8'hFE;
      InstMemory[48] = 8'h13;
      InstMemory[49] = 8'h0B;
      InstMemory[50] = 8'h1B;
      InstMemory[51] = 8'h00;
      InstMemory[52] = 8'h13;
      InstMemory[53] = 8'h0E;
      InstMemory[54] = 8'h8E;
      InstMemory[55] = 8'h00;
      InstMemory[56] = 8'hE3;
      InstMemory[57] = 8'h04;
      InstMemory[58] = 8'h00;
      InstMemory[59] = 8'hFC;
      InstMemory[60] = 8'hB3;
      InstMemory[61] = 8'h02;
      InstMemory[62] = 8'h06;
      InstMemory[63] = 8'h00;
      InstMemory[64] = 8'h23;
      InstMemory[65] = 8'h30;
      InstMemory[66] = 8'hDE;
      InstMemory[67] = 8'h00;
      InstMemory[68] = 8'h23;
      InstMemory[69] = 8'hB0;
      InstMemory[70] = 8'h5E;
      InstMemory[71] = 8'h00;
      InstMemory[72] = 8'h93;
      InstMemory[73] = 8'h8B;
      InstMemory[74] = 8'h1B;
      InstMemory[75] = 8'h00;
      InstMemory[76] = 8'h93;
      InstMemory[77] = 8'h8E;
      InstMemory[78] = 8'h8E;
      InstMemory[79] = 8'h00;
      InstMemory[80] = 8'hE3;
      InstMemory[81] = 8'hC4;
      InstMemory[82] = 8'h8B;
      InstMemory[83] = 8'hFC;
      InstMemory[84] = 8'h13;
      InstMemory[85] = 8'h0B;
      InstMemory[86] = 8'h1B;
      InstMemory[87] = 8'h00;
      InstMemory[88] = 8'h13;
      InstMemory[89] = 8'h0E;
      InstMemory[90] = 8'h8E;
      InstMemory[91] = 8'h00;
      InstMemory[92] = 8'hE3;
      InstMemory[93] = 8'h02;
      InstMemory[94] = 8'h00;
      InstMemory[95] = 8'hFA;
    end

  always @(Inst_Address)
    begin
      Instruction = {InstMemory[Inst_Address + 3], InstMemory[Inst_Address + 2], InstMemory[Inst_Address + 1], InstMemory[Inst_Address]};
    end

endmodule

module Instruction_Parser(
    input [31:0] instruction,
    output [6:0] opcode, funct7,
    output [4:0] rd , rs1 , rs2,
    output [2:0] funct3 

);

assign opcode = instruction[6:0];
assign rd = instruction[11:7];
assign funct3 = instruction[14:12];
assign rs1 = instruction[19:15];
assign rs2 = instruction[24:20];
assign funct7 = instruction[31:25];

endmodule
   
module mux2x1
(
    input [63:0] a,b,
    input sel ,
    output [63:0] data_out
);

assign data_out = sel ? b : a; //select b or a based on the sel bit

endmodule

module Program_Counter
(
    input clk, reset,
    input [63:0] PC_In,
    output reg [63:0] PC_Out
);

  
   always @(posedge clk or posedge reset)
    begin
    if (reset == 1'b1)  // If reset is active high (1), reset the program counter to 0
      begin
        PC_Out = 64'b0;
      end
      if (reset == 1'b0)  // If reset is inactive low (0), update the program counter with the input value
      begin
        PC_Out = PC_In;
      end
    end
  
endmodule

module registerFile (
    input clk,
    input reset,
    input [4:0] rs1,
    input [4:0] rs2,
    input [4:0] rd,
    input [63:0] write_data,
    input RegWrite,
    output reg [63:0] readdata1,
    output reg [63:0] readdata2
);
    
    integer i;                      // Integer variable for loop
    reg [63:0] Registers [31:0];    // Register file array with 32 registers
    
    initial  
    begin 
        for (i = 0; i < 32; i = i + 1)
        begin 
            Registers[i] = 0;       // Initialize all registers to zero
        end 
        Registers[8]=5;
    end 
  
  //operation of writing data into a Register should always be done when  
 //positive edge of clock and RegWrite signal is asserted (or set, i.e. High)  
  always @ (posedge clk) 
    begin   
      case(RegWrite)                             
        1'b1 : 		    Registers[rd] <= write_data;   
      endcase  
    end 
 
  always @ (*)  
    begin   
      if(reset)  
        begin    
          readdata1 = 64'b0;    
          readdata2 = 64'b0;   
        end   
      else   
        begin    
          readdata1 = Registers[rs1];    
          readdata2 = Registers[rs2];   
        end  
    end  
endmodule 

module RISC_V_Processor(
  input clk, reset,
  output wire [63:0] ele1, ele2, ele3, ele4, ele5
);

  wire [63:0] programCounterOut; 
  wire [63:0] adder1Output;
  wire [31:0] instruction; 
  wire [6:0] opcode;
  wire [4:0] destinationRegister;
  wire [2:0] function3;
  wire [4:0] sourceRegister1;
  wire [4:0] sourceRegister2;
  wire [6:0] function7;
  wire [1:0] ALUoperation;
  wire branch, memoryRead, memoryToRegister, memoryWrite, ALUsource, registerWrite;
  wire [63:0] writeData; 
  wire [63:0] readData1;
  wire [63:0] readData2;
  wire [63:0] immediateData;
  wire [63:0] ALUinputB;
  wire [3:0] ALUoperationCode;
  wire [63:0] ALUresult;
  wire zeroFlag;
  wire [63:0] adder2Output;
  wire [63:0] multiplexerOutput;
  wire [63:0] readData;
 
  
  Program_Counter    stage1 (.clk(clk), .reset(reset), .PC_In(multiplexerOutput), .PC_Out(programCounterOut));
  
  Adder              stage2 (.a(programCounterOut), .b(64'd4), .out(adder1Output));
  
  InstructionMemory  stage3 (.Inst_Address(programCounterOut), .Instruction(instruction));
  
  Instruction_Parser stage4 (.instruction(instruction), .opcode(opcode), .rd(destinationRegister), 
                              .funct3(function3), .rs1(sourceRegister1),
                             .rs2(sourceRegister2), .funct7(function7));
                             
  Control_Unit       stage5 (.Opcode(opcode), .ALUOp(ALUoperation), .Branch(branch), .MemRead(memoryRead), .MemtoReg(memoryToRegister), 
                              .MemWrite(memoryWrite), .ALUSrc(ALUsource), .Regwrite(registerWrite));
                              
  registerFile       stage6 (.clk(clk), .reset(reset), .rs1(sourceRegister1), .rs2(sourceRegister2), .rd(destinationRegister), 
                              .write_data(writeData), .RegWrite(registerWrite), .readdata1(readData1), .readdata2(readData2));
                              
  data_extractor     stage7 (.instruction(instruction), .imm_data(immediateData));                
          
  mux2x1             stage8 (.a(readData2), .b(immediateData), .sel(ALUsource), .data_out(ALUinputB));
  
  ALU_Control        stage9 (.ALUOp(ALUoperation), .Funct({instruction[30], instruction[14:12]}), .Operation(ALUoperationCode)); 
                    
  alu_64             stage10 (.a(readData1), .b(ALUinputB), .ALUop(ALUoperationCode), .Result(ALUresult), .Zero(zeroFlag));   
                    
  Adder              stage11 (.a(programCounterOut), .b(immediateData << 1), .out(adder2Output));               
          
  mux2x1             stage12 (.a(adder1Output), .b(adder2Output), .sel(branch & zeroFlag), .data_out(multiplexerOutput)); 
                        
  Data_Memory        stage13 (.clk(clk), .Mem_Address(ALUresult), .Write_Data(readData2), .Read_Data(readData), .MemWrite(memoryWrite), 
                              .MemRead(memoryRead), .element1(ele1), .element2(ele2), .element3(ele3), .element4(ele4), .element5(ele5));
                              
  mux2x1             stage14 (.a(ALUresult), .b(readData), .sel(memoryToRegister), .data_out(writeData));

endmodule
